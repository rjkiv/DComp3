#pragma once

enum InlineDirType {
    kInlineNever = 0,
    kInlineCached = 1,
    kInlineAlways = 2,
    kInlineCachedShared = 3
};

// Object size: 0x2c
// size: 0xCC
class ObjectDir : public virtual Hmx::Object {
    // gRev version 0x1C
    
    struct Entry {
        const char* name;
        Hmx::Object* obj;
    };

    struct Viewport {
        Transform mXfm;
    };

    enum ViewportId {

    };

    KeylessHash<const char*, Entry> mHashTable; // 0x8
    StringTable mStringTable; // 0x28
    FilePath mProxyFile; // 0x3c
    bool mProxyOverride; // 0x44
    InlineDirType mInlineProxyType; // 0x48
    DirLoader *mLoader; // 0x4c
    std::vector<ObjDirPtr<ObjectDir> > mSubDirs; // 0x50
    bool mIsSubDir; // 0x5c
    InlineDirType mInlineSubDirType; // 0x60
    const char *mPathName; // 0x64
    FilePath mStoredFile; // 0x68
    std::vector<InlinedDir> mInlinedDirs; // 0x70
    std::vector<Viewport> mViewports; // 0x7c
    ViewportId mCurViewportID; // 0x88
    Hmx::Object* unk8c; // 0x8c
    Hmx::Object* mCurCam; // 0x90
    int mAlwaysInlined; // 0x94
    const char *mAlwaysInlineHash; // 0x98
};
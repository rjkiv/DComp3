#pragma once

struct OldNodeWeight {
    float unk0;
    float unk4;
    float unk8;
    float unkc;
    float unk10;
};

// Ham1NodeWeight size: 0x14
struct Ham1NodeWeight {
    bool unk0;
    float unk4;
    float unk8;
    float unkc;
    float unk10;
};

BinStream& operator<<(BinStream& bs, Ham1NodeWeight& obj){
    bs << obj.unk4 << obj.unk8 << obj.unkc << obj.unk10 << obj.unk0;
}

// Ham2FrameWeight size: 0x24
struct Ham2FrameWeight {
    float unk0;
    float unk4[4];
    float unk14[4];
};

BinStream& operator<<(BinStream& bs, Ham2FrameWeight& obj){
    bs << obj.unk0;
    for(int i = 0; i < 4; i++){
        bs << obj.unk4[i] << obj.unk14[i];
    }
}

// kNumHam1Nodes = 16
// kMaxNumErrorNodes = 33; for DC2

// MoveFrame size: 0x11b0
struct MoveFrame {
    float unk0; // 0x0 - beat?
    int unk4; // 0x4
    Ham1NodeWeight mHam1NodeWeights[kNumHam1Nodes][4]; // 0x8
    Vector3const mNodeWeights[kMaxNumErrorNodes][kNumMoveMirrored]; // 0x508
    Vector3const mNodeScales[kMaxNumErrorNodes][kNumMoveMirrored]; // 0x928
    Vector3const mNodesInverseScale[kMaxNumErrorNodes][kNumMoveMirrored]; // 0xd48
    Ham2FrameWeight mFrameWeights[kNumMoveMirrored]; // 0x1168
};